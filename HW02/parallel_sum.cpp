#include<iostream>
#include<vector>
#include<thread>
#include<numeric>
#include<random>
#include<chrono>
voidpartial_sum(conststd::vector<int>&data,
size_tstart,size_tend,longlong&out){
out=std::accumulate(data.begin()+start,data.begin()+end,0LL);
}
intmain(){
constsize_tN=10000000;
constintT=std::thread::hardware_concurrency()?
std::thread::hardware_concurrency():4;
std::vector<int>data(N);
std::mt19937rng(42);
std::uniform_int_distribution<int>dist(1,100);
for(auto&x:data)x=dist(rng);
//Baseline(single-threaded)
autot0=std::chrono::high_resolution_clock::now();
longlongbaseline=std::accumulate(data.begin(),data.end(),0LL);
autot1=std::chrono::high_resolution_clock::now();
//Parallel
std::vector<longlong>partials(T,0);
std::vector<std::thread>threads;
threads.reserve(T);
size_tchunk=N/T;
autop0=std::chrono::high_resolution_clock::now();
for(inti=0;i<T;++i){
size_ts=i*chunk;
size_te=(i==T-1)?N:s+chunk;
3
threads.emplace_back(partial_sum,std::cref(data),s,e,std::ref(
partials[i]));
}
for(auto&th:threads)th.join();
longlongtotal=std::accumulate(partials.begin(),partials.end(),0LL)
;
autop1=std::chrono::high_resolution_clock::now();
std::chrono::duration<double>t_base=t1-t0;
std::chrono::duration<double>t_par=p1-p0;
std::cout<<"Baselinesum:"<<baseline
<<"Time:"<<t_base.count()<<"s\n";
std::cout<<"Parallelsum:"<<total
<<"Time:"<<t_par.count()<<"s\n";
return0;
}
